class JogoMedicoRPG:
    def __init__(self):
        self.jogador = None
        self.gemini_api = GeminiAPI(generative_model) # Usa o modelo global configurado
        self.caso_atual = None
        self.casos_concluidos_ids = []

    def _aplicar_habilidades_inicio_caso(self):
        if not self.caso_atual or not self.jogador : return
        if self.jogador.classe == ClassesMedico.CLINICO_GERAL and self.caso_atual.sintomas_reais_ocultos:
            sintomas_nao_revelados_ainda = [s for s in self.caso_atual.sintomas_reais_ocultos if s not in self.caso_atual.sintomas_revelados_jogador]
            if sintomas_nao_revelados_ainda:
                sintoma_revelado_habilidade = random.choice(sintomas_nao_revelados_ainda)
                self.caso_atual.sintomas_revelados_jogador.append(sintoma_revelado_habilidade)
                msg_habilidade = f"üí° ({self.jogador.classe.value['habilidade']}) Voc√™ tem um palpite... parece que o paciente tamb√©m apresenta '{sintoma_revelado_habilidade}', embora n√£o tenha mencionado claramente."
                self.caso_atual.adicionar_progresso_cena(msg_habilidade) 
        elif self.jogador.classe == ClassesMedico.ENFERMEIRO and self.caso_atual.pistas_falsas_criativas:
            pistas_ativas_ainda = [p for p in self.caso_atual.pistas_falsas_criativas if p not in self.caso_atual.pistas_falsas_descartadas]
            if pistas_ativas_ainda:
                pista_descartada_habilidade = random.choice(pistas_ativas_ainda)
                self.caso_atual.pistas_falsas_descartadas.append(pista_descartada_habilidade)
                msg_habilidade = f"üéØ ({self.jogador.classe.value['habilidade']}) Sua intui√ß√£o de enfermagem apita! A informa√ß√£o sobre '{pista_descartada_habilidade}' parece ser um completo alarme falso."
                self.caso_atual.adicionar_progresso_cena(msg_habilidade)

    def iniciar_novo_jogo(self):
        print_lentamente("Bem-vindo ao Plant√£o 24h: O Mist√©rio do Paciente X!")
        print_lentamente("Anos 80. Hospital decadente. Voc√™ √© a nova esperan√ßa (ou desastre ambulante).")
        nome = ""
        while not nome.strip(): nome = input("Qual o seu nome, Doutor(a)? ").strip()

        print_lentamente("\nEscolha sua Classe M√©dica:")
        for i, c_enum in enumerate(ClassesMedico): 
            print_lentamente(f"{i+1}. {c_enum.value['nome']}: {c_enum.value['descricao_habilidade']} (Ex: {c_enum.value['exemplo_uso']})")
        classe_idx = solicitar_input_numerico("Sua Classe: ", 1, len(ClassesMedico))
        classe_esc = list(ClassesMedico)[classe_idx-1]

        print_lentamente("\nEscolha seu Tra√ßo de Personalidade:")
        for i, t_enum in enumerate(TracosMedico): 
            ex_traco = TracosMedico[t_enum.name].value.get('exemplo', t_enum.value['descricao']) 
            print_lentamente(f"{i+1}. {t_enum.value['nome']}: {ex_traco}")
        traco_idx = solicitar_input_numerico("Seu Tra√ßo: ", 1, len(TracosMedico))
        traco_esc = list(TracosMedico)[traco_idx-1]

        self.jogador = Jogador(nome, classe_esc, traco_esc)
        print_lentamente(f"\nBem-vindo(a), Dr(a). {self.jogador.nome}!")
        print_lentamente(str(self.jogador))
        
        combinacao = self.jogador.verificar_combinacao_especial()
        if combinacao:
            msg_combinacao = combinacao.get("interacao_unica", combinacao if isinstance(combinacao, str) else "Efeito especial ativo!")
            print_lentamente(f"\n‚ú® Intera√ß√£o Especial Classe/Tra√ßo: {msg_combinacao} ‚ú®")
            if isinstance(combinacao, dict) and "respostas_exemplo" in combinacao:
                print_lentamente("  Exemplos de como isso pode se manifestar:")
                for tipo_resp, ex_resp in combinacao["respostas_exemplo"]:
                    print_lentamente(f"  - Se escolher {tipo_resp}: \"{ex_resp}\"")
        
        self.casos_concluidos_ids = []
        self.loop_principal_jogo()

    def carregar_jogo_salvo(self):
        jogador_carregado, cids = carregar_jogo()
        if jogador_carregado:
            self.jogador = jogador_carregado; self.casos_concluidos_ids = cids
            print_lentamente(f"\nBem-vindo(a) de volta, Dr(a). {self.jogador.nome}!")
            print_lentamente(str(self.jogador))
            self.loop_principal_jogo()
        else:
            print_lentamente("Falha ao carregar. Iniciando um novo jogo...")
            time.sleep(1)
            self.iniciar_novo_jogo()

    def _gerar_e_iniciar_novo_caso(self):
        if not self.gemini_api.model:
            print_lentamente("API Gemini n√£o configurada. Imposs√≠vel gerar caso.")
            return False

        print_lentamente("\nBuscando prontu√°rio de um novo paciente misterioso...")
        temas_possiveis = [
            "Paciente com pele de cor estranha e del√≠rios", "O Homem da Perna Invis√≠vel (dor fantasma com complica√ß√µes)",
            "Acidente com M√∫ltiplas V√≠timas (foco em um caso principal, mas com men√ß√£o ao caos)", 
            "Paciente que Brilha no Escuro (inspirado em House S05E16)", 
            "A Enfermeira que N√£o Sentia Dor (inspirado em House S02E12, com condi√ß√£o subjacente)", 
            "O Homem que Mordeu o C√£o (hipocondria com sintoma real leve)",
            "O Homem que Falava com Plantas (sintomas psic√≥ticos com causa org√¢nica, tipo Tuberculose cerebral)", 
            "Homem diz que engoliu um Bluetooth (corpo estranho + outra condi√ß√£o inesperada)"
        ]
        if self.jogador.casos_resolvidos < 2: 
            tema_escolhido = random.choice(temas_possiveis[:4] + [None]) 
            dificuldade_sugerida = "f√°cil" if self.jogador.casos_resolvidos == 0 else "normal"
        else:
            tema_escolhido = random.choice(temas_possiveis + [None, None]) 
            dificuldade_sugerida = random.choice(["normal", "dif√≠cil", "bizarro" if self.jogador.fama_de_maluco > 10 else "dif√≠cil"])
        
        print_lentamente(f"(Sorteando caso... tema poss√≠vel: '{tema_escolhido if tema_escolhido else 'Totalmente Aleat√≥rio'}', dificuldade: {dificuldade_sugerida})")
        dados_caso_json = self.gemini_api.gerar_caso_clinico(self.jogador, tema_caso=tema_escolhido, dificuldade=dificuldade_sugerida, casos_anteriores_ids=self.casos_concluidos_ids)

        if not isinstance(dados_caso_json, dict): 
            print_lentamente(f"‚ö†Ô∏è Falha cr√≠tica ao gerar caso (n√£o √© JSON): {str(dados_caso_json)[:500]}...")
            return False
        
        try:
            self.caso_atual = CasoClinico(**dados_caso_json)
            self.caso_atual.jogador = self.jogador 
            print_lentamente(f"\nüìú NOVO CASO: {self.caso_atual.titulo_caso} üìú")
            
            self.caso_atual.adicionar_progresso_cena(self.caso_atual.introducao_narrativa_imersiva)
            self._aplicar_habilidades_inicio_caso() 
            
            self.caso_atual.progresso_narrativa_cena_atual = [self.caso_atual.introducao_narrativa_imersiva.split('\n')[-1]] 
            self._atualizar_opcoes_de_cena_caso_atual() 

            return True
        except TypeError as te: 
            print_lentamente(f"‚ùå Erro ao criar CasoClinico com dados da API (TypeError): {te}")
            print_lentamente(f"Dados recebidos que causaram o erro: {json.dumps(dados_caso_json, indent=2)}")
            return False
        except KeyError as ke:
            print_lentamente(f"‚ùå Erro ao criar CasoClinico (Chave faltando: {ke}).")
            print_lentamente(f"Dados recebidos: {json.dumps(dados_caso_json, indent=2)}")
            return False
        except Exception as e:
            print_lentamente(f"‚ùå Erro inesperado ao iniciar novo caso: {type(e).__name__} - {e}")
            print_lentamente(f"Dados recebidos: {json.dumps(dados_caso_json, indent=2)}")
            return False

    def _atualizar_opcoes_de_cena_caso_atual(self): # NOVO M√âTODO
        if not self.caso_atual: return
        print_lentamente("\n(Gerando novas op√ß√µes de intera√ß√£o para a cena...)") # Movido para antes da chamada da API
        opcoes_geradas = self.gemini_api.gerar_opcoes_de_cena(
            self.jogador, 
            self.caso_atual,
            self.caso_atual.progresso_narrativo_cena_atual 
        )
        if isinstance(opcoes_geradas, list) and len(opcoes_geradas) == 8 and \
           all(isinstance(opt, dict) and "tom" in opt and "opcao_texto" in opt for opt in opcoes_geradas):
            self.caso_atual.opcoes_cena_atuais = opcoes_geradas
        else:
            print_lentamente(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel gerar as 8 op√ß√µes de cena formatadas corretamente.")
            print_lentamente(f"   Resposta da API: {str(opcoes_geradas)[:200]}...")
            self.caso_atual.opcoes_cena_atuais = [
                {"tom": "Pragm√°tica", "opcao_texto": "Reavaliar os sinais vitais do paciente."},
                {"tom": "Emp√°tica", "opcao_texto": "Perguntar ao paciente como ele est√° se sentindo agora."},
                {"tom": "Cautelosa", "opcao_texto": "Aguardar e observar por um momento."} ,
                {"tom": "C√≠nica", "opcao_texto": "Perguntar se o paciente j√° pensou em ser ator."},
                {"tom": "Filos√≥fica", "opcao_texto": "Refletir sobre a natureza da queixa principal."},
                {"tom": "Absurda", "opcao_texto": "Verificar se o paciente tem algum objeto amaldi√ßoado consigo."},
                {"tom": "Her√≥ica", "opcao_texto": "Declarar que este caso ser√° resolvido com brilhantismo."},
                {"tom": "Desastre Iminente", "opcao_texto": "Sugerir um tratamento experimental com sanguessugas."}
            ] 
            random.shuffle(self.caso_atual.opcoes_cena_atuais) 
            self.caso_atual.opcoes_cena_atuais = self.caso_atual.opcoes_cena_atuais[:8]

    def _chance_intervencao_npc(self):
        if not self.caso_atual or random.random() > 0.20: 
            return
        
        npc_nomes = list(NPC_DATA.keys())
        npc_escolhido = random.choice(npc_nomes)
        
        resumo_situacao_para_npc = (
            f"O Dr(a). {self.jogador.nome} est√° atendendo o caso '{self.caso_atual.titulo_caso}'. "
            f"Sintomas conhecidos pelo jogador: {', '.join(list(set(self.caso_atual.sintomas_revelados_jogador)))}. "
            f"Hip√≥teses atuais do jogador: {', '.join(self.caso_atual.hipoteses_jogador) if self.caso_atual.hipoteses_jogador else 'nenhuma clara'}."
        )
        
        # Adiciona a √∫ltima intera√ß√£o da cena para dar mais contexto ao NPC
        ultima_interacao_cena = self.caso_atual.progresso_narrativo_cena_atual[-1] if self.caso_atual.progresso_narrativo_cena_atual else "In√≠cio da cena."
        contexto_npc_completo = f"{resumo_situacao_para_npc} Intera√ß√£o mais recente: {ultima_interacao_cena}"


        # N√£o usar adicionar_progresso_cena aqui para o print inicial, pois ele j√° ser√° usado para o di√°logo do NPC
        print_lentamente(f"\n--- Interven√ß√£o Inesperada de {npc_escolhido}! ---")
        dialogo_npc = self.gemini_api.gerar_dialogo_npc(
            npc_escolhido, 
            {"titulo_caso": self.caso_atual.titulo_caso, "resumo_situacao_para_npc": contexto_npc_completo}, 
            self.jogador
        )
        if "Erro" not in dialogo_npc:
            self.caso_atual.adicionar_progresso_cena(f"{npc_escolhido}: \"{dialogo_npc}\"") # Usa adicionar_progresso_cena
            if npc_escolhido == "Dr. Howser": self.caso_atual.dicas_howser_caso.append(dialogo_npc)
            elif npc_escolhido == "Dra. Meridee Grey": self.caso_atual.diario_meridee_caso.append(dialogo_npc)
        else:
            self.caso_atual.adicionar_progresso_cena(f"{npc_escolhido} parece que ia dizer algo, mas se distrai com uma mosca particularmente interessante.")

    def interagir_com_opcao_de_cena(self, opcao_dict): 
        if not self.caso_atual: return
        
        texto_acao = opcao_dict["opcao_texto"]
        tom_acao = opcao_dict["tom"]

        self.caso_atual.adicionar_progresso_cena(f"\nVoc√™ ({tom_acao}): \"{texto_acao}\"") # Usa adicionar_progresso_cena
        
        narrativa_resposta = self.gemini_api.gerar_resposta_interativa(
            self.jogador, 
            self.caso_atual, 
            texto_acao, 
            tom_acao     
        )
        
        if isinstance(narrativa_resposta, str) and "Erro" in narrativa_resposta:
            self.caso_atual.adicionar_progresso_cena(f"Houve um problema na resposta da IA: {narrativa_resposta}")
        else:
            self.caso_atual.adicionar_progresso_cena(narrativa_resposta) 

            for sint_real in self.caso_atual.sintomas_reais_ocultos:
                if f"'{sint_real.lower()}'" in narrativa_resposta.lower() and sint_real not in self.caso_atual.sintomas_revelados_jogador:
                    self.caso_atual.sintomas_revelados_jogador.append(sint_real)
                    self.caso_atual.adicionar_progresso_cena(f"üîé (Sintoma '{sint_real}' foi revelado/confirmado atrav√©s da intera√ß√£o!)")
        
        self.caso_atual.opcoes_cena_atuais = [] # For√ßa regenerar op√ß√µes para a pr√≥xima "sub-cena"

    def conduzir_caso(self):
        if not self.caso_atual: 
            print_lentamente("‚ö†Ô∏è Nenhum caso ativo para conduzir.")
            return
        
        while self.caso_atual and not self.caso_atual.resolvido:
            # N√£o chamar exibir_resumo_mental aqui automaticamente. Deixe como uma a√ß√£o do jogador.
            print_lentamente(f"\n--- Investigando: {self.caso_atual.titulo_caso} ---")
            self._chance_intervencao_npc() 

            if not self.caso_atual.opcoes_cena_atuais: 
                self._atualizar_opcoes_de_cena_caso_atual()

            menu_acoes_cena = {} 
            menu_acoes_fixas = {} 
            
            print_lentamente("\nEscolha uma A√ß√£o/Di√°logo para a Cena:")
            if self.caso_atual.opcoes_cena_atuais:
                for i, opcao_data in enumerate(self.caso_atual.opcoes_cena_atuais):
                    menu_acoes_cena[i + 1] = opcao_data 
                    print_lentamente(f"  {i + 1}. [{opcao_data['tom']}] {opcao_data['opcao_texto']}")
            else:
                print_lentamente("  (A IA n√£o gerou op√ß√µes de cena. Verifique a API ou tente uma a√ß√£o fixa.)")

            next_fixed_idx = (len(menu_acoes_cena) if menu_acoes_cena else 0) + 1

            print_lentamente("\nOutras A√ß√µes Poss√≠veis:")
            idx_hipotese = next_fixed_idx; menu_acoes_fixas[idx_hipotese] = {"tipo": "hipotese", "texto": "Adicionar/Ver hip√≥teses diagn√≥sticas"}; print_lentamente(f"  {idx_hipotese}. {menu_acoes_fixas[idx_hipotese]['texto']}"); next_fixed_idx += 1
            idx_howser = next_fixed_idx; menu_acoes_fixas[idx_howser] = {"tipo": "dica_howser", "texto": "(Modo M√©dico) Pedir dica ao Dr. Howser"}; print_lentamente(f"  {idx_howser}. {menu_acoes_fixas[idx_howser]['texto']}"); next_fixed_idx += 1
            idx_meridee = next_fixed_idx; menu_acoes_fixas[idx_meridee] = {"tipo": "dica_meridee", "texto": "(Modo M√©dico) Consultar di√°rio da Dra. Meridee"}; print_lentamente(f"  {idx_meridee}. {menu_acoes_fixas[idx_meridee]['texto']}"); next_fixed_idx += 1
            
            idx_artista = -1
            if self.jogador.traco == TracosMedico.ARTISTA_FRUSTRADO:
                idx_artista = next_fixed_idx; menu_acoes_fixas[idx_artista] = {"tipo": "desenhar", "texto": "Desenhar um sintoma/observa√ß√£o"}; print_lentamente(f"  {idx_artista}. {menu_acoes_fixas[idx_artista]['texto']}"); next_fixed_idx += 1
            
            idx_resumo = next_fixed_idx; menu_acoes_fixas[idx_resumo] = {"tipo": "resumo_mental", "texto": "Organizar pensamentos / Revisar prontu√°rio"}; print_lentamente(f"  {idx_resumo}. {menu_acoes_fixas[idx_resumo]['texto']}"); next_fixed_idx +=1

            idx_diagnostico = next_fixed_idx; menu_acoes_fixas[idx_diagnostico] = {"tipo": "diagnosticar", "texto": "TENTAR DIAGN√ìSTICO FINAL"}; print_lentamente(f"  {idx_diagnostico}. {menu_acoes_fixas[idx_diagnostico]['texto']}"); next_fixed_idx += 1
            idx_salvar = next_fixed_idx; menu_acoes_fixas[idx_salvar] = {"tipo": "salvar", "texto": "Salvar e Voltar ao Menu Principal"}; print_lentamente(f"  {idx_salvar}. {menu_acoes_fixas[idx_salvar]['texto']}"); 
            
            max_total_option_val = next_fixed_idx -1 # Corrigido para pegar o √∫ltimo √≠ndice usado

            escolha_num_str = input(f"Sua a√ß√£o (1-{max_total_option_val}): ").strip()
            if not escolha_num_str: continue
            try:
                escolha_num = int(escolha_num_str)
                if not (1 <= escolha_num <= max_total_option_val): raise ValueError
            except ValueError:
                print_lentamente("Op√ß√£o inv√°lida. Tente novamente.")
                continue

            if escolha_num in menu_acoes_cena:
                opcao_de_cena_escolhida = menu_acoes_cena[escolha_num]
                self.interagir_com_opcao_de_cena(opcao_de_cena_escolhida)
            elif escolha_num in menu_acoes_fixas:
                acao_fixa_obj = menu_acoes_fixas[escolha_num]
                tipo_acao_fixa = acao_fixa_obj["tipo"]

                if tipo_acao_fixa == "hipotese": self.listar_ou_add_hipoteses()
                elif tipo_acao_fixa == "dica_howser": self.pedir_dica_npc("Dr. Howser")
                elif tipo_acao_fixa == "dica_meridee": self.pedir_dica_npc("Dra. Meridee Grey")
                elif tipo_acao_fixa == "desenhar" and self.jogador.traco == TracosMedico.ARTISTA_FRUSTRADO: self.desenhar_sintoma()
                elif tipo_acao_fixa == "resumo_mental": self.caso_atual.exibir_resumo_mental(self.jogador.nome) 
                elif tipo_acao_fixa == "diagnosticar": self.propor_diagnostico_final()
                elif tipo_acao_fixa == "salvar":
                    salvar_jogo(self.jogador, self.casos_concluidos_ids)
                    self.caso_atual = None 
                    return 
            else:
                print_lentamente("Op√ß√£o n√£o reconhecida.")

            if self.caso_atual and self.caso_atual.resolvido:
                # A narrativa do desfecho j√° foi impressa por propor_diagnostico_final
                print_lentamente("\n[CASO CONCLU√çDO]")
                self.caso_atual = None 
                break 
            
            time.sleep(0.3)
    
    # Manter os outros m√©todos como:
    # listar_ou_add_hipoteses(self) -> usar adicionar_progresso_cena se quiser que fa√ßa parte do hist√≥rico da cena
    # pedir_dica_npc(self, npc_nome_param) -> usar adicionar_progresso_cena
    # desenhar_sintoma(self) -> usar adicionar_progresso_cena
    # propor_diagnostico_final(self) -> OK
    # finalizar_caso_com_diagnostico(self, diagnostico_proposto) -> OK
    # loop_principal_jogo(self) -> OK

    def listar_ou_add_hipoteses(self):
        if not self.caso_atual: return
        print_lentamente("\nüìã Suas hip√≥teses diagn√≥sticas atuais:")
        if not self.caso_atual.hipoteses_jogador: print_lentamente("(Nenhuma ainda.)")
        else:
            for i, h in enumerate(self.caso_atual.hipoteses_jogador): print_lentamente(f"  {i+1}. {h}")
        
        nova_h = input("Adicionar/refinar hip√≥tese (ou Enter para voltar): ").strip()
        if nova_h:
            self.caso_atual.hipoteses_jogador.append(nova_h)
            self.caso_atual.adicionar_progresso_cena(f"Voc√™ pondera e anota uma nova suspeita: {nova_h}.") 
            if "l√∫pus" in nova_h.lower().strip() and self.caso_atual.id_caso != "caso_secreto_do_lupus_real_007": 
                self.caso_atual.adicionar_progresso_cena("Uma voz familiar ecoa em sua mente, soando suspeitamente como Dr. Howser: '√â claro que voc√™ pensou em l√∫pus. NUNCA √© l√∫pus.'")
            elif "l√∫pus" in nova_h.lower().strip() and self.caso_atual.id_caso == "caso_secreto_do_lupus_real_007":
                 self.caso_atual.adicionar_progresso_cena("Por um instante, voc√™ quase ouve Dr. Howser engasgar. 'Espera... s√≥ desta vez... talvez.'")
            
            if self.jogador.traco == TracosMedico.TEORICO_CONSPIRACAO and random.random() < 0.4:
                hipotese_conspiratoria = self.gemini_api._gerar_conteudo_seguro(
                    f"Dr(a). {self.jogador.nome}, um Te√≥rico da Conspira√ß√£o, considera a hip√≥tese '{nova_h}'. "
                    f"Gere uma hip√≥tese alternativa BIZARRA e CONSPIRAT√ìRIA que ele/ela tamb√©m consideraria para o caso '{self.caso_atual.titulo_caso}' "
                    f"com sintomas {self.caso_atual.sintomas_revelados_jogador}. (1 frase curta)"
                )
                if "Erro" not in hipotese_conspiratoria:
                    self.caso_atual.hipoteses_jogador.append(f"{hipotese_conspiratoria} (Conspira√ß√£o)")
                    self.caso_atual.adicionar_progresso_cena(f"üëΩ (E se... e se '{hipotese_conspiratoria}' for a verdadeira causa? Sua mente borbulha com as possibilidades.)")
                    self.jogador.fama_de_maluco +=1

    def pedir_dica_npc(self, npc_nome_param): 
        if not self.caso_atual: return
        lista_dicas_ou_reflexoes = []
        prefixo_narrativo = ""

        if npc_nome_param == "Dr. Howser":
            lista_dicas_ou_reflexoes = self.caso_atual.dicas_howser_caso
            prefixo_narrativo = "Dr. Howser resmunga do canto da sala:"
        elif npc_nome_param == "Dra. Meridee Grey": 
            lista_dicas_ou_reflexoes = self.caso_atual.diario_meridee_caso
            prefixo_narrativo = "(Uma voz interior, como a da Dra. Meridee, sussurra:"

        if lista_dicas_ou_reflexoes:
            item_escolhido = random.choice(lista_dicas_ou_reflexoes)
            self.caso_atual.adicionar_progresso_cena(f"{prefixo_narrativo} \"{item_escolhido}\"")
        else: 
            contexto_geral_para_dica = f"O jogador Dr(a). {self.jogador.nome} est√° investigando o caso '{self.caso_atual.titulo_caso}'. Sintomas atuais observados: {', '.join(list(set(self.caso_atual.sintomas_revelados_jogador)))}. O diagn√≥stico real do caso √© {self.caso_atual.diagnostico_real_medico} (jogador n√£o sabe)."
            nova_interacao_npc = self.gemini_api.gerar_dialogo_npc(npc_nome_param, 
                {"titulo_caso": self.caso_atual.titulo_caso, "resumo_situacao_para_npc": contexto_geral_para_dica}, 
                self.jogador)
            
            if "Erro" in nova_interacao_npc:
                self.caso_atual.adicionar_progresso_cena(f"{npc_nome_param} parece estar muito ocupado para dar aten√ß√£o agora. ({nova_interacao_npc})")
            else:
                if npc_nome_param == "Dr. Howser": self.caso_atual.dicas_howser_caso.append(nova_interacao_npc)
                elif npc_nome_param == "Dra. Meridee Grey": self.caso_atual.diario_meridee_caso.append(nova_interacao_npc)
                self.caso_atual.adicionar_progresso_cena(f"{npc_nome_param} aparece de repente e comenta: \"{nova_interacao_npc}\"")

    def desenhar_sintoma(self):
        if not self.caso_atual: return
        if self.jogador.traco != TracosMedico.ARTISTA_FRUSTRADO: 
            # Esta mensagem n√£o deve ser adicionada ao progresso da cena se o jogador n√£o pode fazer
            print_lentamente("Apenas Artistas Frustrados podem usar esta nobre forma de diagn√≥stico.") 
            return
        
        sint_desenhar = input("Qual sintoma ou observa√ß√£o voc√™ quer imortalizar em sua 'arte'?\n> ").strip()
        if not sint_desenhar: 
            self.caso_atual.adicionar_progresso_cena("A inspira√ß√£o art√≠stica n√£o veio desta vez.")
            return

        desc_desenho_gerada = self.gemini_api.gerar_imagem_sintoma_descricao_textual(self.jogador, sint_desenhar)
        self.caso_atual.adicionar_progresso_cena(f"\n--- üé® Obra Prima Incompreendida de Dr(a). {self.jogador.nome} üé® ---")
        if "Erro" in desc_desenho_gerada:
            self.caso_atual.adicionar_progresso_cena(f"Sua tentativa de desenhar foi... um borr√£o. (Erro da API: {desc_desenho_gerada})")
        else:
            self.caso_atual.adicionar_progresso_cena(desc_desenho_gerada)
            self.caso_atual.adicionar_progresso_cena("(Como o hospital n√£o tem verba para impressoras coloridas nos anos 80, voc√™ descreve sua vis√£o gloriosa aos colegas menos iluminados, esperando que entendam sua genialidade).")
            self.jogador.fama_de_maluco += random.randint(0,1)

    def propor_diagnostico_final(self):
        if not self.caso_atual: return
        
        if not self.caso_atual.opcoes_diagnostico_atuais: 
            self._atualizar_opcoes_diagnostico_caso_atual()

        if not self.caso_atual.opcoes_diagnostico_atuais: # Se ainda falhou
            self.caso_atual.adicionar_progresso_cena("O sistema de classifica√ß√£o de doen√ßas parece estar em manuten√ß√£o. Imposs√≠vel listar op√ß√µes de diagn√≥stico agora.")
            diag_proposto_texto = input(f"FALLBACK: Qual o seu diagn√≥stico final para {self.caso_atual.paciente_info.get('nome', 'este paciente')}?\n> ").strip()
            if not diag_proposto_texto:
                 self.caso_atual.adicionar_progresso_cena("Voc√™ decide esperar mais um pouco.")
                 return
            self.finalizar_caso_com_diagnostico(diag_proposto_texto)
            return

        print_lentamente("\nEscolha o Diagn√≥stico Final:")
        for i, diag_opcao in enumerate(self.caso_atual.opcoes_diagnostico_atuais):
            print_lentamente(f"  {i+1}. {diag_opcao}")
        
        escolha_idx_str = input(f"Seu diagn√≥stico (1-{len(self.caso_atual.opcoes_diagnostico_atuais)}): ").strip()
        try:
            escolha_idx = int(escolha_idx_str) -1
            if not (0 <= escolha_idx < len(self.caso_atual.opcoes_diagnostico_atuais)):
                raise ValueError
            diagnostico_escolhido = self.caso_atual.opcoes_diagnostico_atuais[escolha_idx]
        except (ValueError, IndexError):
            self.caso_atual.adicionar_progresso_cena("Escolha inv√°lida. Voc√™ decide ponderar mais.")
            return
        
        self.finalizar_caso_com_diagnostico(diagnostico_escolhido)

    def finalizar_caso_com_diagnostico(self, diagnostico_proposto):
        if not self.caso_atual: return 
        self.caso_atual.adicionar_progresso_cena(f"\nVoc√™ declara com (incerta?) convic√ß√£o: \"O diagn√≥stico √©... {diagnostico_proposto}!\"")
        # print_lentamente(f"\nProcessando seu veredito: '{diagnostico_proposto}'...") # Removido, j√° faz parte do adicionar_progresso_cena
        desfecho_obj_json = self.gemini_api.gerar_desfecho_caso(self.jogador, self.caso_atual, diagnostico_proposto)

        if not isinstance(desfecho_obj_json, dict):
            print_lentamente(f"‚ö†Ô∏è Falha cr√≠tica ao gerar desfecho (n√£o √© JSON v√°lido): {str(desfecho_obj_json)[:500]}...")
            self.caso_atual.adicionar_progresso_cena("O sistema de prontu√°rios explodiu (metaforicamente). O destino do paciente √© um mist√©rio c√≥smico.")
            self.caso_atual.resolvido = True 
            self.jogador.reputacao = max(0, self.jogador.reputacao - 2) 
            return
        
        try:
            # Usar adicionar_progresso_cena para a narrativa do desfecho para manter consist√™ncia
            self.caso_atual.adicionar_progresso_cena("\n--- ü©∫ DESFECHO DO CASO ü©∫ ---")
            self.caso_atual.adicionar_progresso_cena(desfecho_obj_json["desfecho_narrativa"])
            self.caso_atual.resolvido = True
            self.caso_atual.desfecho_final = desfecho_obj_json

            self.jogador.reputacao = max(0, min(100, self.jogador.reputacao + desfecho_obj_json.get("reputacao_delta", 0)))
            self.jogador.pontuacao_diagnostica += desfecho_obj_json.get("pontuacao_diagnostica_delta", 0)
            self.jogador.fama_de_maluco = max(0, self.jogador.fama_de_maluco + desfecho_obj_json.get("fama_de_maluco_delta", 0))
            self.jogador.casos_resolvidos += 1
            if self.caso_atual.id_caso not in self.casos_concluidos_ids:
                 self.casos_concluidos_ids.append(self.caso_atual.id_caso)

            # A Ficha Educativa √© mais um relat√≥rio, ent√£o print_lentamente direto √© ok aqui.
            print_lentamente(f"\n--- {desfecho_obj_json.get('ficha_educativa_titulo','Ficha Educativa do Caso')} ---")
            print_lentamente(f"Seu Diagn√≥stico: {desfecho_obj_json['diagnostico_final_jogador']}")
            print_lentamente(f"Diagn√≥stico Correto: {desfecho_obj_json['diagnostico_correto_caso']}")
            print_lentamente(f"Voc√™ acertou? {'Sim!' if desfecho_obj_json['acertou'] else 'N√£o desta vez.'}")
            print_lentamente(f"\nDoen√ßa Real: {desfecho_obj_json['doenca_real_ficha']}")
            print_lentamente(f"Explica√ß√£o Simplificada: {desfecho_obj_json['explicacao_doenca_ficha']}")
            print_lentamente(f"Erro Comum: {desfecho_obj_json['erro_comum_ficha']}")
            print_lentamente(f"Dica para Vida Real: {desfecho_obj_json['dica_vida_real_ficha']}")
            
            if desfecho_obj_json.get("comentario_howser_final"): 
                print_lentamente(f"Dr. Howser comenta sarcasticamente: \"{desfecho_obj_json['comentario_howser_final']}\"")
            if desfecho_obj_json.get("comentario_meridee_final"): 
                print_lentamente(f"Dra. Meridee reflete poeticamente: \"{desfecho_obj_json['comentario_meridee_final']}\"")
            
            print_lentamente(f"\nSeu status atual: Reputa√ß√£o {self.jogador.reputacao}, Pontos de Diagn√≥stico {self.jogador.pontuacao_diagnostica}, Fama de Maluco {self.jogador.fama_de_maluco}")

        except KeyError as e: 
            print_lentamente(f"‚ùå Erro ao processar dados do desfecho (chave faltando: {e}).")
            print_lentamente(f"Dados recebidos do desfecho: {json.dumps(desfecho_obj_json, indent=2)}")
            self.caso_atual.adicionar_progresso_cena("Um erro bizarro ocorreu nos arquivos do hospital. O desfecho √©... nebuloso.")
        except Exception as e: 
            print_lentamente(f"‚ùå Erro inesperado ao finalizar o caso: {type(e).__name__} - {e}")
            self.caso_atual.adicionar_progresso_cena("O hospital est√° um caos! Algo deu muito errado com a papelada.")

    def loop_principal_jogo(self):
        if not self.jogador: 
            print_lentamente("Erro cr√≠tico: Jogador n√£o foi inicializado. Saindo.")
            return

        rodando = True
        while rodando:
            print_lentamente(f"\nüè• Hospital Anos 80 - Dr(a). {self.jogador.nome} üè•")
            print_lentamente(f"Rep: {self.jogador.reputacao} | Casos Resolvidos: {self.jogador.casos_resolvidos} | Diag. Certos: {self.jogador.pontuacao_diagnostica} | Fama de Maluco: {self.jogador.fama_de_maluco}")
            print_lentamente("--- Menu Principal do Plant√£o ---")
            print_lentamente("1. Atender pr√≥ximo paciente (Novo Caso Cl√≠nico)")
            print_lentamente("2. Ver Status Completo do M√©dico")
            print_lentamente("3. Salvar Jogo (Progresso do Jogador)")
            print_lentamente("4. Sair do Plant√£o (Encerrar Jogo)")

            escolha_menu_str = input(f"Sua escolha (1-4): ").strip()
            if not escolha_menu_str: continue 
            
            try:
                escolha_menu = int(escolha_menu_str)
                if not (1 <= escolha_menu <= 4): raise ValueError
            except ValueError:
                print_lentamente("Op√ß√£o inv√°lida. Tente novamente.")
                continue

            if escolha_menu == 1:
                if self._gerar_e_iniciar_novo_caso(): 
                    self.conduzir_caso()
                    if self.caso_atual is None: 
                        print_lentamente("\nRetornando ao sagu√£o principal do hospital...")
                else: 
                    print_lentamente("‚ö†Ô∏è N√£o foi poss√≠vel iniciar um novo caso. Verifique a API ou tente mais tarde.")
            elif escolha_menu == 2: 
                print_lentamente("\n--- Status Completo do M√©dico ---")
                print_lentamente(str(self.jogador))
            elif escolha_menu == 3: 
                salvar_jogo(self.jogador, self.casos_concluidos_ids)
            elif escolha_menu == 4:
                print_lentamente("Obrigado por jogar 'Plant√£o 24h: O Mist√©rio do Paciente X'! At√© o pr√≥ximo (ca√≥tico) plant√£o.")
                rodando = False
            
            if self.jogador.reputacao <= 0:
                print_lentamente("\n--- ‚ò†Ô∏è FIM DE JOGO POR REPUTA√á√ÉO NULA ‚ò†Ô∏è ---")
                # ... (manter mensagens de game over)
                rodando = False
            
            if self.jogador.fama_de_maluco >= 20 and random.random() < (0.1 * (self.jogador.fama_de_maluco - 19)): 
                print_lentamente("\n--- ü§™ FIM DE JOGO POR LOUCURA EXCESSIVA ü§™ ---")
                # ... (manter mensagens de game over)
                rodando = False
        print_lentamente("Fim da simula√ß√£o.")